"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _fs = _interopRequireDefault(require("mz/fs.js"));
var _path = _interopRequireDefault(require("path"));
var _debug = _interopRequireDefault(require("debug"));
var _os = _interopRequireDefault(require("os"));
var _utils = require("./lib/utils.js");
var _sourceLoader = require("./lib/sourceLoader.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const httpDebug = (0, _debug.default)('page-loader:http');
const osDebug = (0, _debug.default)('page-loader:os');
const pathDebug = (0, _debug.default)('page-loader:path');
const loaderDebug = (0, _debug.default)('page-loader:loader');
require('axios-debug-log/enable');
var _default = (address, dir = '.', task = undefined) => {
  let filePageName;
  let filesDir;
  let tempDir;
  return Promise.resolve().then(() => (0, _utils.getFileName)(address)).then(filename => {
    filePageName = filename;
    return true;
  }).then(() => _fs.default.mkdtemp(`${_os.default.tmpdir()}${_path.default.sep}`)).then(tmpPath => {
    tempDir = tmpPath;
    filesDir = _path.default.resolve(tempDir, `${filePageName}_files`);
  }).then(() => _axios.default.get(address)).then(response => {
    loaderDebug(`address: '${address}'`);
    loaderDebug(`output: '${dir}'`);
    httpDebug('Page have been loaded.');
    const page = (0, _utils.setLocalSource)(response.data, `${filePageName}_files`, address);
    loaderDebug('Links have been replaced to local files.');
    const promisePageSave = _fs.default.writeFile(_path.default.resolve(tempDir, `${filePageName}.html`), page).then(() => osDebug('Page have been saved.'));
    const promiseFilesSave = _fs.default.mkdir(filesDir).then(() => osDebug(`Dir '${filesDir}' created.`)).then(() => (0, _sourceLoader.sourceLoader)(response.data, address, task)).then(files => {
      const promises = files.map(file => {
        const filePath = _path.default.resolve(filesDir, file.pathSave);
        return _fs.default.writeFile(filePath, file.data).then(() => {
          osDebug(`File saved '${file.pathSave}'`);
          pathDebug(`path: '${filePath}'`);
          return file.url;
        });
      });
      return Promise.all(promises);
    }).then(() => loaderDebug('Resources have been saved.'));
    return Promise.all([promiseFilesSave, promisePageSave]).then(() => _fs.default.readFile(_path.default.resolve(tempDir, `${filePageName}.html`))).then(data => _fs.default.writeFile(_path.default.resolve(dir, `${filePageName}.html`), data)).then(() => _fs.default.mkdir(_path.default.resolve(dir, `${filePageName}_files`))).then(() => _fs.default.readdir(filesDir)).then(files => {
      const promises = files.map(file => {
        const name = _path.default.basename(file);
        return _fs.default.readFile(_path.default.resolve(filesDir, file)).then(data => _fs.default.writeFile(_path.default.resolve(dir, `${filePageName}_files`, name), data));
      });
      return Promise.all(promises);
    });
  }).then(() => loaderDebug('Resources have been saved.'));
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,