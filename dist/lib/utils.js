"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sources = exports.setLocalSource = exports.getLinks = exports.getFileName = exports.getCurrentLink = void 0;
var _path = _interopRequireDefault(require("path"));
var _debug = _interopRequireDefault(require("debug"));
var cheerio = _interopRequireWildcard(require("cheerio"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const debugHrefLocal = (0, _debug.default)('page-loader:href-local');
const debugHref = (0, _debug.default)('page-loader:href');
const sources = {
  link: 'href',
  script: 'src',
  img: 'src'
};
exports.sources = sources;
const getFileName = address => {
  try {
    const url = new URL(address);
    if (!url.hostname) {
      throw new Error('Incorrect address (must be like \'https://google.com\')');
    }
    const pathname = url.pathname.split('.');
    return `${url.hostname}${pathname[0] || ''}`.replace(/[^0-9a-z]/gi, '-');
  } catch {
    throw new Error('Incorrect address (must be like \'https://google.com\')');
  }
};
exports.getFileName = getFileName;
const getCurrentLink = (host, link) => {
  const uri = new URL(link);
  const url = new URL(uri);
  url.hostname = uri.hostname || new URL(host).hostname;
  url.protocol = uri.protocol || new URL(host).protocol;
  return url.toString();
};
exports.getCurrentLink = getCurrentLink;
const getLinks = (html, hostname) => {
  const $ = cheerio.load(html);
  const linkList = [];
  for (const [key, value] of Object.entries(sources)) {
    const links = $('html').find(key);
    links.filter(tag => $(links[tag]).attr(value)).toArray().forEach(link => {
      const currentLink = getCurrentLink(hostname, link.attribs[value]);
      if (linkList.indexOf(currentLink) === -1) {
        linkList.push(currentLink);
      }
    });
  }
  return linkList;
};
exports.getLinks = getLinks;
const setLocalSource = (page, dir, host) => {
  const $ = cheerio.load(page);
  for (const [key, value] of Object.entries(sources)) {
    const links = $('html').find(key);
    links.each(idx => {
      if ($(links[idx]).attr(value)) {
        const ext = _path.default.extname($(links[idx]).attr(value));
        const currentLink = getCurrentLink(host, $(links[idx]).attr(value));
        const localHREF = _path.default.join(dir, `${getFileName(currentLink)}${ext}`);
        debugHref(currentLink);
        debugHrefLocal(localHREF);
        $(links[idx]).attr(value, localHREF);
      }
    });
  }
  return $.html();
};
exports.setLocalSource = setLocalSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,